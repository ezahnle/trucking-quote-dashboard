<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carrier Performance & Quote Routing Dashboard - Live Data</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background-color: #f8f9fa;
            line-height: 1.6;
        }
        
        .container {
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 24px;
            margin-bottom: 5px;
        }
        
        .header p {
            color: #7f8c8d;
            margin: 0;
        }
        
        .refresh-btn {
            background: #3498db;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.2s;
        }
        
        .refresh-btn:hover {
            background: #2980b9;
        }
        
        .refresh-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }
        
        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-left: 10px;
            border: 2px solid #3498db;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 6px;
            margin: 20px 0;
            border: 1px solid #f5c6cb;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 6px;
            margin: 20px 0;
            border: 1px solid #c3e6cb;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .metric-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .metric-card h3 {
            margin: 0 0 10px 0;
            font-size: 16px;
        }
        
        .metric-value {
            font-size: 32px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .last-updated {
            font-size: 12px;
            color: #7f8c8d;
            text-align: right;
            margin-top: 10px;
        }
        
        .dashboard-content {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .tab-nav {
            border-bottom: 1px solid #e9ecef;
            padding: 0 20px;
        }
        
        .tab-button {
            padding: 15px 20px;
            border: none;
            background: transparent;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-weight: normal;
            color: #7f8c8d;
        }
        
        .tab-button.active {
            border-bottom-color: #3498db;
            color: #3498db;
            font-weight: bold;
        }
        
        .tab-content {
            padding: 20px;
        }
        
        .filters {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .filter-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .filter-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 4px;
        }
        
        .routing-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
        }
        
        .routing-card {
            padding: 20px;
            border-radius: 8px;
            position: relative;
            border: 2px solid #e9ecef;
        }
        
        .routing-card.first {
            background: #e8f5e8;
            border-color: #27ae60;
        }
        
        .routing-card.second {
            background: #fff3e0;
            border-color: #f39c12;
        }
        
        .routing-card.third {
            background: #e6f3ff;
            border-color: #3498db;
        }
        
        .routing-badge {
            position: absolute;
            top: -10px;
            left: 15px;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            color: white;
        }
        
        .routing-badge.first { background: #27ae60; }
        .routing-badge.second { background: #f39c12; }
        .routing-badge.third { background: #3498db; }
        .routing-badge.other { background: #7f8c8d; }
        
        .carrier-name {
            margin: 10px 0 10px 0;
            color: #2c3e50;
            font-size: 18px;
            font-weight: bold;
        }
        
        .carrier-stats {
            font-size: 14px;
            color: #7f8c8d;
        }
        
        .carrier-stats div {
            margin-bottom: 5px;
        }
        
        .table-container {
            overflow-x: auto;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border: 1px solid #dee2e6;
        }
        
        th {
            background: #f8f9fa;
            font-weight: bold;
        }
        
        tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .performance-score {
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
        }
        
        .score-high {
            background: #e8f5e8;
            color: #27ae60;
        }
        
        .score-medium {
            background: #fff3e0;
            color: #f39c12;
        }
        
        .score-low {
            background: #ffe6e6;
            color: #e74c3c;
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .status-bound {
            background: #d4edda;
            color: #155724;
        }
        
        .status-declined {
            background: #f8d7da;
            color: #721c24;
        }
        
        .hidden {
            display: none;
        }
        
        .no-data {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            background: #f8f9fa;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .quick-links {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        .quick-link {
            background: #6c757d;
            color: white;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 12px;
            transition: background 0.2s;
        }
        
        .quick-link:hover {
            background: #5a6268;
        }
        
        .setup-instructions {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .setup-instructions h3 {
            color: #856404;
            margin-bottom: 10px;
        }
        
        .setup-instructions ol {
            color: #856404;
            margin-left: 20px;
        }
        
        .setup-instructions code {
            background: #f8f9fa;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div>
                <h1>üìä Carrier Performance & Quote Routing Dashboard</h1>
                <p>Ed Zahnle - Network TruckInsurance Services | Live Google Sheets Data</p>
            </div>
            <button class="refresh-btn" onclick="loadDashboardData()" id="refreshBtn">
                <span id="refreshText">üîÑ Refresh Data</span>
            </button>
        </div>

        <!-- Setup Instructions (show only if no data) -->
        <div id="setupInstructions" class="setup-instructions hidden">
            <h3>‚öôÔ∏è Setup Required</h3>
            <p>To connect your Google Sheets data to this dashboard:</p>
            <ol>
                <li>Copy the Google Apps Script code provided</li>
                <li>Open <a href="https://script.google.com" target="_blank">Google Apps Script</a></li>
                <li>Create a new project and paste the code</li>
                <li>Update the <code>SHEET_ID</code> variable with your Google Sheets ID</li>
                <li>Update the sheet names to match your actual sheet names</li>
                <li>Deploy as a web app with "Anyone can access" permissions</li>
                <li>Update the <code>SCRIPT_URL</code> in this HTML file with your deployment URL</li>
            </ol>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="loading hidden">
            <div>üîÑ Loading your quote data from Google Sheets...</div>
        </div>

        <!-- Error State -->
        <div id="errorState" class="error-message hidden">
            <strong>‚ùå Unable to load data.</strong> <span id="errorMessage"></span>
            <div class="quick-links">
                <a href="#" class="quick-link" onclick="loadDashboardData(); return false;">üîÑ Try Again</a>
                <a href="https://docs.google.com/spreadsheets" class="quick-link" target="_blank">üìä Open Google Sheets</a>
                <a href="https://script.google.com" class="quick-link" target="_blank">‚öôÔ∏è Google Apps Script</a>
            </div>
        </div>

        <!-- Success Message -->
        <div id="successMessage" class="success-message hidden">
            <strong>‚úÖ Data loaded successfully!</strong> <span id="dataDetails"></span>
        </div>

        <!-- Main Dashboard -->
        <div id="dashboardMain" class="hidden">
            <!-- Key Metrics -->
            <div class="metrics-grid">
                <div class="metric-card">
                    <h3 style="color: #3498db;">üìã Total Quotes</h3>
                    <div class="metric-value" id="totalSubmissions">0</div>
                    <div class="last-updated" id="lastUpdated">Never updated</div>
                </div>
                <div class="metric-card">
                    <h3 style="color: #27ae60;">‚úÖ Bound Policies</h3>
                    <div class="metric-value" id="boundPolicies">0</div>
                </div>
                <div class="metric-card">
                    <h3 style="color: #e67e22;">üèÜ Top Carrier</h3>
                    <div class="metric-value" style="font-size: 18px;" id="topCarrier">Loading...</div>
                </div>
                <div class="metric-card">
                    <h3 style="color: #8e44ad;">üìà Success Rate</h3>
                    <div class="metric-value" style="font-size: 24px;" id="successRate">0%</div>
                </div>
            </div>

            <!-- Dashboard Content -->
            <div class="dashboard-content">
                <div class="tab-nav">
                    <button class="tab-button active" onclick="showTab('routing')">üó∫Ô∏è Smart Routing</button>
                    <button class="tab-button" onclick="showTab('carriers')">üè¢ Carrier Performance</button>
                    <button class="tab-button" onclick="showTab('operations')">üöõ Operation Types</button>
                    <button class="tab-button" onclick="showTab('commodities')">üì¶ Commodities</button>
                    <button class="tab-button" onclick="showTab('submissions')">üìã All Submissions</button>
                </div>

                <!-- Smart Routing Tab -->
                <div id="routing-tab" class="tab-content">
                    <h3 style="margin-bottom: 20px; color: #2c3e50;">üéØ Smart Quote Routing Tool</h3>
                    
                    <div class="filters">
                        <div class="filter-group">
                            <label>Operation Type:</label>
                            <select id="operationType" onchange="updateRouting()">
                                <option value="all">All Operation Types</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>Commodity Type:</label>
                            <select id="commodityType" onchange="updateRouting()">
                                <option value="all">All Commodities</option>
                            </select>
                        </div>
                    </div>

                    <div>
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">üìç Recommended Carrier Routing Order</h4>
                        <div id="routingRecommendations" class="routing-grid">
                            <!-- Will be populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Carrier Performance Tab -->
                <div id="carriers-tab" class="tab-content hidden">
                    <h3 style="margin-bottom: 20px; color: #2c3e50;">üè¢ Carrier Performance Analysis</h3>
                    
                    <!-- Key Carrier Details -->
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                        <h4 style="color: #2c3e50; margin-bottom: 15px;">üìã Key Carrier Information</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
                            <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #27ae60;">
                                <div style="font-weight: bold; color: #27ae60;">Progressive Commercial</div>
                                <div style="font-size: 14px; color: #7f8c8d; margin-top: 5px;">
                                    üéØ CA dump trucks - AUTOMATIC first choice<br>
                                    üìû Agent codes: 36046 or 66929<br>
                                    ‚ö†Ô∏è WON'T DO UIIA - important restriction
                                </div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #3498db;">
                                <div style="font-weight: bold; color: #3498db;">Sentry Select</div>
                                <div style="font-size: 14px; color: #7f8c8d; margin-top: 5px;">
                                    üìû 800-742-5681 for payments<br>
                                    ‚úÖ Will do UIIA<br>
                                    ‚ö†Ô∏è Avoids Long Beach, LA, NJ ports
                                </div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #f39c12;">
                                <div style="font-weight: bold; color: #f39c12;">Bellingham</div>
                                <div style="font-size: 14px; color: #7f8c8d; margin-top: 5px;">
                                    üìû Nicole Direct Line: 360-922-5244<br>
                                    üó∫Ô∏è 250+ mile radius capability<br>
                                    üìÑ Requires full docs package
                                </div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #9b59b6;">
                                <div style="font-weight: bold; color: #9b59b6;">IAT</div>
                                <div style="font-size: 14px; color: #7f8c8d; margin-top: 5px;">
                                    üöõ Fleet specialist - multiple units<br>
                                    üéØ Go-to for 8+ truck operations<br>
                                    üìä Strong long haul appetite
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-container">
                        <table id="carrierTable">
                            <thead>
                                <tr>
                                    <th>Carrier</th>
                                    <th>Submitted</th>
                                    <th>Quoted</th>
                                    <th>Won</th>
                                    <th>Quote Rate</th>
                                    <th>Win Rate</th>
                                    <th>Avg Premium</th>
                                    <th>Performance Score</th>
                                </tr>
                            </thead>
                            <tbody id="carrierTableBody">
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Operations Tab -->
                <div id="operations-tab" class="tab-content hidden">
                    <h3 style="margin-bottom: 20px; color: #2c3e50;">üöõ Operation Type Performance</h3>
                    <div id="operationsContent">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Commodities Tab -->
                <div id="commodities-tab" class="tab-content hidden">
                    <h3 style="margin-bottom: 20px; color: #2c3e50;">üì¶ Commodity Type Analysis</h3>
                    <div class="table-container">
                        <table id="commodityTable">
                            <thead>
                                <tr>
                                    <th>Commodity</th>
                                    <th>Submissions</th>
                                    <th>Bound</th>
                                    <th>Bind Rate</th>
                                    <th>Avg Premium</th>
                                    <th>Best Carrier</th>
                                </tr>
                            </thead>
                            <tbody id="commodityTableBody">
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Submissions Tab -->
                <div id="submissions-tab" class="tab-content hidden">
                    <h3 style="margin-bottom: 20px; color: #2c3e50;">üìã Recent Quote Submissions</h3>
                    <div class="table-container">
                        <table id="submissionsTable">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Customer</th>
                                    <th>Operation</th>
                                    <th>Commodity</th>
                                    <th>Status</th>
                                    <th>Quote ID</th>
                                </tr>
                            </thead>
                            <tbody id="submissionsTableBody">
                                <!-- Will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ‚úÖ CONNECTED: Using your existing Google Apps Script URL
        const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwrt3Axv4G0zLkp27T4Pf9uXPh1JkH2isMudio8G2t3Zd1Sj9FF4ow8ULgJw0YXDg/exec';
        
        // Global data storage
        let dashboardData = {
            quotes: [],
            carrierAttempts: [],
            isLoaded: false,
            lastUpdated: null
        };
        
        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
        });
        
        async function loadDashboardData() {
            const refreshBtn = document.getElementById('refreshBtn');
            const refreshText = document.getElementById('refreshText');
            
            try {
                // Show loading state
                refreshBtn.disabled = true;
                refreshText.textContent = 'üîÑ Loading...';
                showElement('loadingState');
                hideElement('errorState');
                hideElement('successMessage');
                hideElement('dashboardMain');
                hideElement('setupInstructions');
                
                // Fetch data from Google Sheets via Apps Script
                const response = await fetch(SCRIPT_URL + '?action=getDashboardData&' + Date.now(), {
                    method: 'GET',
                    mode: 'cors',
                    cache: 'no-cache',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Store the data
                dashboardData.quotes = data.quotes || [];
                dashboardData.carrierAttempts = data.carrierAttempts || [];
                dashboardData.lastUpdated = data.lastUpdated || new Date().toISOString();
                dashboardData.isLoaded = true;
                
                // Show success message
                document.getElementById('dataDetails').textContent = 
                    `${dashboardData.quotes.length} quotes, ${dashboardData.carrierAttempts.length} carrier attempts`;
                showElement('successMessage');
                
                // Hide loading, show dashboard
                hideElement('loadingState');
                showElement('dashboardMain');
                
                // Update all dashboard components
                updateMetrics();
                populateFilters();
                updateRouting();
                
                // Auto-hide success message after 3 seconds
                setTimeout(() => {
                    hideElement('successMessage');
                }, 3000);
                
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                
                // Show error state
                hideElement('loadingState');
                document.getElementById('errorMessage').textContent = error.message;
                showElement('errorState');
                
                // Show setup instructions if it looks like a setup issue
                if (error.message.includes('Script function not found') || 
                    error.message.includes('Authorization required') ||
                    error.message.includes('HTTP 404')) {
                    showElement('setupInstructions');
                }
                
            } finally {
                refreshBtn.disabled = false;
                refreshText.textContent = 'üîÑ Refresh Data';
            }
        }
        
        function showElement(id) {
            document.getElementById(id).classList.remove('hidden');
        }
        
        function hideElement(id) {
            document.getElementById(id).classList.add('hidden');
        }
        
        function updateMetrics() {
            const totalQuotes = dashboardData.quotes.length;
            const boundQuotes = dashboardData.quotes.filter(q => 
                q.Status === 'Bound'
            ).length;
            const successRate = totalQuotes > 0 ? ((boundQuotes / totalQuotes) * 100).toFixed(1) : 0;
            
            // Find top carrier by wins - using your exact column names
            const carrierWins = {};
            dashboardData.carrierAttempts.forEach(attempt => {
                const won = attempt['Won (Y/N)'] === 'Y' || attempt['Won (Y/N)'] === 'Yes';
                const carrierName = attempt['Carrier Name'];
                
                if (won && carrierName) {
                    carrierWins[carrierName] = (carrierWins[carrierName] || 0) + 1;
                }
            });
            
            const topCarrier = Object.entries(carrierWins)
                .sort((a, b) => b[1] - a[1])[0]?.[0] || 'No data';
            
            // Update UI
            document.getElementById('totalSubmissions').textContent = totalQuotes;
            document.getElementById('boundPolicies').textContent = boundQuotes;
            document.getElementById('topCarrier').textContent = topCarrier;
            document.getElementById('successRate').textContent = successRate + '%';
            
            if (dashboardData.lastUpdated) {
                const lastUpdated = new Date(dashboardData.lastUpdated);
                document.getElementById('lastUpdated').textContent = 
                    `Updated: ${lastUpdated.toLocaleDateString()} ${lastUpdated.toLocaleTimeString()}`;
            }
        }
        
        function populateFilters() {
            // Get unique operation types and commodities from the data - using your exact sheet column names
            const operationTypes = [...new Set(dashboardData.quotes.map(q => 
                q['Operation Type']
            ).filter(Boolean))];
            
            const commodities = [...new Set(dashboardData.quotes.map(q => 
                q['Commodity']
            ).filter(Boolean))];
            
            // Populate operation type filter
            const operationSelect = document.getElementById('operationType');
            operationSelect.innerHTML = '<option value="all">All Operation Types</option>';
            operationTypes.forEach(type => {
                const option = document.createElement('option');
                option.value = type;
                option.textContent = type;
                operationSelect.appendChild(option);
            });
            
            // Populate commodity filter
            const commoditySelect = document.getElementById('commodityType');
            commoditySelect.innerHTML = '<option value="all">All Commodities</option>';
            commodities.forEach(commodity => {
                const option = document.createElement('option');
                option.value = commodity;
                option.textContent = commodity;
                commoditySelect.appendChild(option);
            });
        }
        
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            // Remove active class from all buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Initialize tab content
            if (tabName === 'routing') {
                updateRouting();
            } else if (tabName === 'carriers') {
                updateCarrierTable();
            } else if (tabName === 'operations') {
                updateOperationsTab();
            } else if (tabName === 'commodities') {
                updateCommodityTable();
            } else if (tabName === 'submissions') {
                updateSubmissionsTable();
            }
        }
        
        function updateRouting() {
            const operationType = document.getElementById('operationType')?.value || 'all';
            const commodityType = document.getElementById('commodityType')?.value || 'all';
            
            // Filter quotes based on selection - using your exact column names
            const filteredQuotes = dashboardData.quotes.filter(q => {
                const qOpType = q['Operation Type'];
                const qCommodity = q['Commodity'];
                
                return (operationType === 'all' || qOpType === operationType) &&
                       (commodityType === 'all' || qCommodity === commodityType);
            });
            
            // Get corresponding carrier attempts - using your exact column names
            const quoteIds = filteredQuotes.map(q => q['Quote ID (USDOT)']);
            const relevantAttempts = dashboardData.carrierAttempts.filter(a => {
                const attemptQuoteId = a['Quote ID (USDOT)'];
                return quoteIds.includes(attemptQuoteId);
            });
            
            // Calculate carrier performance - using your exact column names
            const carrierStats = {};
            relevantAttempts.forEach(attempt => {
                const carrierName = attempt['Carrier Name'];
                if (!carrierName) return;
                
                if (!carrierStats[carrierName]) {
                    carrierStats[carrierName] = {
                        attempts: 0,
                        quotes: 0,
                        wins: 0
                    };
                }
                
                carrierStats[carrierName].attempts++;
                
                const quoted = attempt['Quoted (Y/N)'] === 'Y' || attempt['Quoted (Y/N)'] === 'Yes';
                const won = attempt['Won (Y/N)'] === 'Y' || attempt['Won (Y/N)'] === 'Yes';
                
                if (quoted) {
                    carrierStats[carrierName].quotes++;
                    if (won) {
                        carrierStats[carrierName].wins++;
                    }
                }
            });
            
            // Calculate and sort recommendations
            const recommendations = Object.entries(carrierStats)
                .map(([carrier, stats]) => ({
                    carrier,
                    attempts: stats.attempts,
                    quoteRate: stats.attempts > 0 ? (stats.quotes / stats.attempts * 100).toFixed(1) : 0,
                    winRate: stats.quotes > 0 ? (stats.wins / stats.quotes * 100).toFixed(1) : 0,
                    score: stats.attempts > 0 ? (stats.quotes * stats.wins) / stats.attempts : 0
                }))
                .sort((a, b) => b.score - a.score);
            
            // Update display
            const container = document.getElementById('routingRecommendations');
            container.innerHTML = '';
            
            if (recommendations.length === 0) {
                container.innerHTML = '<div class="no-data">üìä No carrier data available for this filter combination.</div>';
                return;
            }
            
            recommendations.slice(0, 6).forEach((rec, index) => {
                const card = document.createElement('div');
                card.className = `routing-card ${index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : 'other'}`;
                
                const badgeText = index === 0 ? '#1 FIRST CHOICE' : index === 1 ? '#2 BACKUP' : index === 2 ? '#3 ALTERNATIVE' : `#${index + 1} OPTION`;
                const badgeClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : 'other';
                
                card.innerHTML = `
                    <div class="routing-badge ${badgeClass}">${badgeText}</div>
                    <div class="carrier-name">${rec.carrier}</div>
                    <div class="carrier-stats">
                        <div>üìä Quote Rate: <strong>${rec.quoteRate}%</strong></div>
                        <div>üéØ Win Rate: <strong>${rec.winRate}%</strong></div>
                        <div>üìà Attempts: <strong>${rec.attempts}</strong></div>
                    </div>
                `;
                
                container.appendChild(card);
            });
        }
        
        function updateCarrierTable() {
            const carrierStats = {};
            
            // Process carrier attempts using your exact column names
            dashboardData.carrierAttempts.forEach(attempt => {
                const carrierName = attempt['Carrier Name'];
                if (!carrierName) return;
                
                if (!carrierStats[carrierName]) {
                    carrierStats[carrierName] = {
                        submitted: 0,
                        quoted: 0,
                        won: 0,
                        totalPremium: 0
                    };
                }
                
                carrierStats[carrierName].submitted++;
                
                const quoted = attempt['Quoted (Y/N)'] === 'Y' || attempt['Quoted (Y/N)'] === 'Yes';
                const won = attempt['Won (Y/N)'] === 'Y' || attempt['Won (Y/N)'] === 'Yes';
                const premium = parseFloat(attempt['Premium Amount'] || 0);
                
                if (quoted) {
                    carrierStats[carrierName].quoted++;
                    if (won) {
                        carrierStats[carrierName].won++;
                        carrierStats[carrierName].totalPremium += premium;
                    }
                }
            });

            const tbody = document.getElementById('carrierTableBody');
            tbody.innerHTML = '';

            Object.entries(carrierStats).forEach(([carrier, stats]) => {
                const quoteRatio = stats.submitted > 0 ? (stats.quoted / stats.submitted * 100).toFixed(1) : 0;
                const winRatio = stats.quoted > 0 ? (stats.won / stats.quoted * 100).toFixed(1) : 0;
                const avgPremium = stats.won > 0 ? Math.round(stats.totalPremium / stats.won) : 0;
                const competitiveness = parseFloat(quoteRatio) * parseFloat(winRatio) / 100;
                
                const scoreClass = competitiveness > 50 ? 'score-high' : competitiveness > 25 ? 'score-medium' : 'score-low';
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${carrier}</strong></td>
                    <td>${stats.submitted}</td>
                    <td>${stats.quoted}</td>
                    <td>${stats.won}</td>
                    <td>${quoteRatio}%</td>
                    <td>${winRatio}%</td>
                    <td>$${avgPremium.toLocaleString()}</td>
                    <td><div class="performance-score ${scoreClass}">${competitiveness.toFixed(1)}</div></td>
                `;
                tbody.appendChild(row);
            });
        }
        
        function updateOperationsTab() {
            const opTypes = {};
            
            // Process quotes using your exact column names
            dashboardData.quotes.forEach(quote => {
                const type = quote['Operation Type'];
                if (!type) return;
                
                if (!opTypes[type]) {
                    opTypes[type] = {
                        submissions: 0,
                        bound: 0
                    };
                }
                
                opTypes[type].submissions++;
                
                if (quote.Status === 'Bound') {
                    opTypes[type].bound++;
                }
            });

            const container = document.getElementById('operationsContent');
            container.innerHTML = '';

            if (Object.keys(opTypes).length === 0) {
                container.innerHTML = '<div class="no-data">üìä No operation type data available.</div>';
                return;
            }

            Object.entries(opTypes).forEach(([type, data]) => {
                const bindRatio = data.submissions > 0 ? (data.bound / data.submissions * 100).toFixed(1) : 0;

                const card = document.createElement('div');
                card.style.cssText = 'padding: 15px; margin-bottom: 10px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e9ecef;';
                card.innerHTML = `
                    <div style="font-weight: bold; color: #2c3e50; font-size: 16px; margin-bottom: 8px;">üöõ ${type}</div>
                    <div style="font-size: 14px; color: #7f8c8d;">
                        <div>üìä ${data.submissions} submissions ‚Ä¢ ${data.bound} bound ‚Ä¢ ${bindRatio}% success</div>
                    </div>
                `;
                container.appendChild(card);
            });
        }
        
        function updateCommodityTable() {
            const commodities = {};
            
            // Process quotes using your exact column names
            dashboardData.quotes.forEach(quote => {
                const commodity = quote['Commodity'];
                if (!commodity) return;
                
                if (!commodities[commodity]) {
                    commodities[commodity] = {
                        submissions: 0,
                        bound: 0
                    };
                }
                
                commodities[commodity].submissions++;
                
                if (quote.Status === 'Bound') {
                    commodities[commodity].bound++;
                }
            });

            const tbody = document.getElementById('commodityTableBody');
            tbody.innerHTML = '';

            Object.entries(commodities).forEach(([commodity, data]) => {
                const bindRatio = data.submissions > 0 ? (data.bound / data.submissions * 100).toFixed(1) : 0;

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>üì¶ ${commodity}</strong></td>
                    <td>${data.submissions}</td>
                    <td>${data.bound}</td>
                    <td>${bindRatio}%</td>
                    <td>-</td>
                    <td>-</td>
                `;
                tbody.appendChild(row);
            });
        }
        
        function updateSubmissionsTable() {
            const tbody = document.getElementById('submissionsTableBody');
            tbody.innerHTML = '';

            // Display quotes using your exact column names
            dashboardData.quotes.forEach(quote => {
                const date = quote['Date'];
                const customer = quote['Customer Name'];
                const operation = quote['Operation Type'];
                const commodity = quote['Commodity'];
                const status = quote['Status'];
                const quoteId = quote['Quote ID (USDOT)'];

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${date || '-'}</td>
                    <td>${customer || '-'}</td>
                    <td>${operation || '-'}</td>
                    <td>${commodity || '-'}</td>
                    <td><span class="status-badge ${status === 'Bound' ? 'status-bound' : 'status-declined'}">${status || 'Unknown'}</span></td>
                    <td>${quoteId || '-'}</td>
                `;
                tbody.appendChild(row);
            });
        }
    </script>
</body>
</html>
